// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/url.proto

package crawlerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Url with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Url) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Url with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UrlMultiError, or nil if none found.
func (m *Url) ValidateAll() error {
	return m.validate(true)
}

func (m *Url) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for Description

	// no validation rules for Queue

	// no validation rules for Domain

	// no validation rules for IsActive

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UrlMultiError(errors)
	}

	return nil
}

// UrlMultiError is an error wrapping multiple validation errors returned by
// Url.ValidateAll() if the designated constraints aren't met.
type UrlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UrlMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UrlMultiError) AllErrors() []error { return m }

// UrlValidationError is the validation error returned by Url.Validate if the
// designated constraints aren't met.
type UrlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlValidationError) ErrorName() string { return "UrlValidationError" }

// Error satisfies the builtin error interface
func (e UrlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlValidationError{}

// Validate checks the field values on CreateUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUrlRequestMultiError, or nil if none found.
func (m *CreateUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUrlRequestValidationError{
					field:  "Url",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUrlRequestValidationError{
					field:  "Url",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUrlRequestValidationError{
				field:  "Url",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUrlRequestMultiError(errors)
	}

	return nil
}

// CreateUrlRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUrlRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUrlRequestMultiError) AllErrors() []error { return m }

// CreateUrlRequestValidationError is the validation error returned by
// CreateUrlRequest.Validate if the designated constraints aren't met.
type CreateUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUrlRequestValidationError) ErrorName() string { return "CreateUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUrlRequestValidationError{}

// Validate checks the field values on CreateUrlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUrlResponseMultiError, or nil if none found.
func (m *CreateUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateUrlResponseMultiError(errors)
	}

	return nil
}

// CreateUrlResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUrlResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUrlResponseMultiError) AllErrors() []error { return m }

// CreateUrlResponseValidationError is the validation error returned by
// CreateUrlResponse.Validate if the designated constraints aren't met.
type CreateUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUrlResponseValidationError) ErrorName() string {
	return "CreateUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUrlResponseValidationError{}

// Validate checks the field values on GetUrlsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUrlsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUrlsRequestMultiError,
// or nil if none found.
func (m *GetUrlsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetUrlsRequestMultiError(errors)
	}

	return nil
}

// GetUrlsRequestMultiError is an error wrapping multiple validation errors
// returned by GetUrlsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUrlsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlsRequestMultiError) AllErrors() []error { return m }

// GetUrlsRequestValidationError is the validation error returned by
// GetUrlsRequest.Validate if the designated constraints aren't met.
type GetUrlsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlsRequestValidationError) ErrorName() string { return "GetUrlsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUrlsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlsRequestValidationError{}

// Validate checks the field values on GetUrlsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUrlsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUrlsResponseMultiError, or nil if none found.
func (m *GetUrlsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUrlsResponseValidationError{
						field:  fmt.Sprintf("Urls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUrlsResponseValidationError{
						field:  fmt.Sprintf("Urls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUrlsResponseValidationError{
					field:  fmt.Sprintf("Urls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUrlsResponseMultiError(errors)
	}

	return nil
}

// GetUrlsResponseMultiError is an error wrapping multiple validation errors
// returned by GetUrlsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUrlsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlsResponseMultiError) AllErrors() []error { return m }

// GetUrlsResponseValidationError is the validation error returned by
// GetUrlsResponse.Validate if the designated constraints aren't met.
type GetUrlsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlsResponseValidationError) ErrorName() string { return "GetUrlsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUrlsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlsResponseValidationError{}

// Validate checks the field values on UpdateUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUrlRequestMultiError, or nil if none found.
func (m *UpdateUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUrlRequestValidationError{
					field:  "Url",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUrlRequestValidationError{
					field:  "Url",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUrlRequestValidationError{
				field:  "Url",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUrlRequestMultiError(errors)
	}

	return nil
}

// UpdateUrlRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUrlRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUrlRequestMultiError) AllErrors() []error { return m }

// UpdateUrlRequestValidationError is the validation error returned by
// UpdateUrlRequest.Validate if the designated constraints aren't met.
type UpdateUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUrlRequestValidationError) ErrorName() string { return "UpdateUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUrlRequestValidationError{}

// Validate checks the field values on UpdateUrlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUrlResponseMultiError, or nil if none found.
func (m *UpdateUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateUrlResponseMultiError(errors)
	}

	return nil
}

// UpdateUrlResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUrlResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUrlResponseMultiError) AllErrors() []error { return m }

// UpdateUrlResponseValidationError is the validation error returned by
// UpdateUrlResponse.Validate if the designated constraints aren't met.
type UpdateUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUrlResponseValidationError) ErrorName() string {
	return "UpdateUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUrlResponseValidationError{}
