// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/queue.proto

package crawlerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Queue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Queue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Queue with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QueueMultiError, or nil if none found.
func (m *Queue) ValidateAll() error {
	return m.validate(true)
}

func (m *Queue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Queue

	// no validation rules for Domain

	// no validation rules for Cron

	// no validation rules for Quantity

	// no validation rules for IsActive

	if len(errors) > 0 {
		return QueueMultiError(errors)
	}

	return nil
}

// QueueMultiError is an error wrapping multiple validation errors returned by
// Queue.ValidateAll() if the designated constraints aren't met.
type QueueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueueMultiError) AllErrors() []error { return m }

// QueueValidationError is the validation error returned by Queue.Validate if
// the designated constraints aren't met.
type QueueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueueValidationError) ErrorName() string { return "QueueValidationError" }

// Error satisfies the builtin error interface
func (e QueueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueueValidationError{}

// Validate checks the field values on CreateQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQueueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQueueRequestMultiError, or nil if none found.
func (m *CreateQueueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQueueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateQueueRequestValidationError{
					field:  "Queue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateQueueRequestValidationError{
					field:  "Queue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateQueueRequestValidationError{
				field:  "Queue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateQueueRequestMultiError(errors)
	}

	return nil
}

// CreateQueueRequestMultiError is an error wrapping multiple validation errors
// returned by CreateQueueRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateQueueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQueueRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQueueRequestMultiError) AllErrors() []error { return m }

// CreateQueueRequestValidationError is the validation error returned by
// CreateQueueRequest.Validate if the designated constraints aren't met.
type CreateQueueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQueueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQueueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQueueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQueueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQueueRequestValidationError) ErrorName() string {
	return "CreateQueueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQueueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQueueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQueueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQueueRequestValidationError{}

// Validate checks the field values on CreateQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQueueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQueueResponseMultiError, or nil if none found.
func (m *CreateQueueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQueueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateQueueResponseMultiError(errors)
	}

	return nil
}

// CreateQueueResponseMultiError is an error wrapping multiple validation
// errors returned by CreateQueueResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateQueueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQueueResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQueueResponseMultiError) AllErrors() []error { return m }

// CreateQueueResponseValidationError is the validation error returned by
// CreateQueueResponse.Validate if the designated constraints aren't met.
type CreateQueueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQueueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQueueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQueueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQueueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQueueResponseValidationError) ErrorName() string {
	return "CreateQueueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQueueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQueueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQueueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQueueResponseValidationError{}

// Validate checks the field values on GetQueuesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetQueuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQueuesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQueuesRequestMultiError, or nil if none found.
func (m *GetQueuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQueuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetQueuesRequestMultiError(errors)
	}

	return nil
}

// GetQueuesRequestMultiError is an error wrapping multiple validation errors
// returned by GetQueuesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetQueuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQueuesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQueuesRequestMultiError) AllErrors() []error { return m }

// GetQueuesRequestValidationError is the validation error returned by
// GetQueuesRequest.Validate if the designated constraints aren't met.
type GetQueuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQueuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQueuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQueuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQueuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQueuesRequestValidationError) ErrorName() string { return "GetQueuesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetQueuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQueuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQueuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQueuesRequestValidationError{}

// Validate checks the field values on GetQueuesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetQueuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQueuesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQueuesResponseMultiError, or nil if none found.
func (m *GetQueuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQueuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQueues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQueuesResponseValidationError{
						field:  fmt.Sprintf("Queues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQueuesResponseValidationError{
						field:  fmt.Sprintf("Queues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQueuesResponseValidationError{
					field:  fmt.Sprintf("Queues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQueuesResponseMultiError(errors)
	}

	return nil
}

// GetQueuesResponseMultiError is an error wrapping multiple validation errors
// returned by GetQueuesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetQueuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQueuesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQueuesResponseMultiError) AllErrors() []error { return m }

// GetQueuesResponseValidationError is the validation error returned by
// GetQueuesResponse.Validate if the designated constraints aren't met.
type GetQueuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQueuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQueuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQueuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQueuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQueuesResponseValidationError) ErrorName() string {
	return "GetQueuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQueuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQueuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQueuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQueuesResponseValidationError{}

// Validate checks the field values on UpdateQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQueueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateQueueRequestMultiError, or nil if none found.
func (m *UpdateQueueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQueueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQueueRequestValidationError{
					field:  "Queue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQueueRequestValidationError{
					field:  "Queue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQueueRequestValidationError{
				field:  "Queue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateQueueRequestMultiError(errors)
	}

	return nil
}

// UpdateQueueRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateQueueRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateQueueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQueueRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQueueRequestMultiError) AllErrors() []error { return m }

// UpdateQueueRequestValidationError is the validation error returned by
// UpdateQueueRequest.Validate if the designated constraints aren't met.
type UpdateQueueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQueueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQueueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQueueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQueueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQueueRequestValidationError) ErrorName() string {
	return "UpdateQueueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQueueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQueueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQueueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQueueRequestValidationError{}

// Validate checks the field values on UpdateQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQueueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateQueueResponseMultiError, or nil if none found.
func (m *UpdateQueueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQueueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateQueueResponseMultiError(errors)
	}

	return nil
}

// UpdateQueueResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateQueueResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateQueueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQueueResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQueueResponseMultiError) AllErrors() []error { return m }

// UpdateQueueResponseValidationError is the validation error returned by
// UpdateQueueResponse.Validate if the designated constraints aren't met.
type UpdateQueueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQueueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQueueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQueueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQueueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQueueResponseValidationError) ErrorName() string {
	return "UpdateQueueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQueueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQueueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQueueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQueueResponseValidationError{}
